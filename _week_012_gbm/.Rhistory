lapply(list(a), cumsum)
lapply(list(a), cumsum)[[1]][200000]
lapply(list(a), cumsum)[[1]][20000]
lapply(list(a), cumsum)[[1]][20001]
lapply(list(a), cumsum)[[1]][20002]
lapply(list(a), cumsum)[[1]][20001]
b = unlist(lapply(list(a), cumsum))
b[length(a)]
y_true_order <- y_true[order(y_prob)]
n <- length(y_true)
best_mcc <- 0
best_cutoff <- -1
mccs <- c()
for (i in 1:(n-1)) tpvec1 = as.numeric(sum(y_true_order[(i+1):n]))
length(tpvec1)
tpvec1 = c()
for (i in 1:(n-1)) tpvec1[i] = as.numeric(sum(y_true_order[(i+1):n]))
length(tpvec1)
tail(tpvec1)
head(tpvec1)
tpvec = unlist(lapply(list(a), cumsum))
head(tpvec)
tpvec = unlist(lapply(list(y_true_order), cumsum))
head(tpvec)
tail(tpvec)
tpvec = unlist(lapply(list(y_true_order[-1]), cumsum))
all.equal(tpvec, tpvec1)
all.equal(tpvec, rev(tpvec1))
tpvec = rev(unlist(lapply(list(y_true_order[-1]), cumsum)))
tpvec = unlist(lapply(list(y_true_order[-1]), cumsum))
tpvec1 = c()
for (i in 1:(n-1)) tpvec1[i] = as.numeric(sum(y_true_order[(i+1):n]))
tpvec1 = c()
for (i in 1:(n-1)) tpvec1[i] = as.numeric(sum(y_true_order[(i+1):n]))
tpvec = rev(unlist(lapply(list(y_true_order[-1]), cumsum)))
sum(y_true_order)
fnvec1 = c()
for (i in 1:(n-1)) tpvec1[i] = as.numeric(sum(y_true_order[1:i]))
eval_mcc <- function(y_true, y_prob, plot=T)
{
y_true_order <- y_true[order(y_prob)]
n <- length(y_true)
best_mcc <- 0
best_cutoff <- -1
mccs <- c()
for (i in 1:(n-1))
{
tp <- as.numeric(sum(y_true_order[(i+1):n]))
fp <- n - i - tp
fn <- as.numeric(sum(y_true_order[1:i]))
tn <- i - fn
mccs[i] <- mcc(tp, fp, fn, tn)
}
if (plot) { plot(mccs) }
best = which.max(mccs)
cat(mccs[best], y_prob[order(y_prob)[best]], "\n")
return(best_mcc)
}
system.time(eval_mcc(y_true, y_prob))
eval_mcc <- function(y_true, y_prob, plot=T)
{
y_true_order <- y_true[order(y_prob)]
n <- length(y_true)
best_mcc <- 0
best_cutoff <- -1
mccs <- c()
for (i in 1:(n-1))
{
tp <- as.numeric(sum(y_true_order[(i+1):n]))
fp <- n - i - tp
fn <- as.numeric(sum(y_true_order[1:i]))
tn <- i - fn
mccs[i] <- mcc(tp, fp, fn, tn)
}
if (plot) { plot(mccs) }
best = which.max(mccs)
cat(mccs[best], y_prob[order(y_prob)[best]], "\n")
return(best_mcc)
}
system.time(eval_mcc(y_true, y_prob))
library(reshape2)
data("tips")
names(tips)
tipsm = melt(tips, id = names(tipes)[-1])
tipsm = melt(tips, id = names(tips)[-1])
tipsm
dcast(tipsm, time ~ variable, fun.aggregate = mean)
dcast(tipsm, sex ~ variable, fun.aggregate = mean)
dcast(tipsm, sex ~ variable, fun.aggregate = length)
dcast(tipsm, time ~ variable, fun.aggregate = mean)
dcast(tipsm, time + sex ~ variable, fun.aggregate = mean)
dcast(tipsm, time + sex ~ variable, fun.aggregate = length)
dcast(tipsm, time ~ sex + variable, fun.aggregate = length)
# 1) Can we link "Pooled Claims Report" to Rewards, we have no employee ID in the former.
# 2) Do we have dependants information for employees who left two years ago. Eg. Richard Kemp (ID:7000288)
# left looks like he left at the end of 2013, but he is not in the mcpmdep file. Can we get this one quarterly ?
#############################################################
rm(list=ls())
setwd("C:/Users/IBM_ADMIN/Box Sync/Labatt Brewing/_data")
# Load libraries
library(readxl)
library(data.table)
# file names and location
name_rewards = "Rewards Data/Rewards Data - Historical.xlsx"
name_claims  = "Rewards Data/Labatt - Pooled Claims Report - 01JAN16 to 30SEP16.xlsx"
name_unknown = "Rewards Data/C0083165_mcpmdep_141016_190127_85478E.xls"
#name_hris    = "SAP_Example.xlsx"
name_travel  = "Travel docs. Rewards Doc 2.xls"
# Check the sheets in each
excel_sheets(name_rewards)
excel_sheets(name_claims)
excel_sheets(name_unknown)
#excel_sheets(name_hris)
excel_sheets(name_travel)
##########################################################
# Lets look at first rewards file - called Rewards Data
##########################################################
rew_sheets = excel_sheets(name_rewards)
# check which columns are consistent in all
cols = list()
for(i in 1:length(rew_sheets)) cols[[i]] = colnames(read_excel(name_rewards, sheet = rew_sheets[i], col_names = TRUE, skip=4))
common_cols = Reduce(intersect, cols)
uncommon_cols = setdiff(unlist(cols), common_cols)
# Looks like Market reference salary is named differently in different sheets - let change this
# Now lets read it all in, subset the common columns, and convert to data table
for(i in 1:length(rew_sheets)){
tmp = read_excel(name_rewards, sheet = rew_sheets[i], col_names = TRUE, skip=4)
names(tmp)[names(tmp)=="Market Reference Salary"] = "MRS"
tmp = data.table(tmp[,c(common_cols, "MRS")])
tmp[,qtr:= rew_sheets[i]]
if(i==1){
dtrew = tmp
}else{
dtrew = rbind(tmp, dtrew)
}
}
dtrew = dtrew[!is.na(ID)]
# So we have 52K rows of data
str(lapply(dtrew, unique), vec.len = 4)
barplot(table(dtrew$Function))
barplot(table(dtrew$`Sub-Function`))
barplot(table(dtrew$`Employee Group`))
barplot(table(dtrew$`Employee Subgroup`))
barplot(table(dtrew$`Organizational Unit`))
barplot(table(dtrew$`Personnel Subarea Text`))
#View(dtrew[order(ID, qtr)][1:500])
##########################################################
# Lets look at first rewards file - called Travel
##########################################################
# air travels
sheets = excel_sheets(name_travel)
sheets
cols = list()
sheets_air = grep("Air", sheets, value=T)
for(i in 1:length(sheets_air)) cols[[i]] = colnames(read_excel(name_travel, sheet = sheets_air[i],
col_names = TRUE, skip=0))
common_cols = Reduce(intersect, cols)
uncommon_cols = setdiff(unlist(cols), common_cols)
common_cols
uncommon_cols
for(i in 1:length(sheets_air)){
tmp = data.table(read_excel(name_travel, sheet = sheets_air[i], col_names = TRUE, skip=0))
if(i==1){
dtair = tmp
}else{
dtair= rbind(tmp, dtair)
}
}
str(lapply(dtair, unique), vec.len = 4)
# Lets keep it simple - just look at purchases
dtair = dtair[ `Transaction type` == "Air purchase"]
# Drop some columns not of interest and aggregate to employee quarter level.
dtair = dtair[,.(`Employee ID`, `Transaction amount (C$)`, `Domestic / International`, `Travel start date/time`, `Travel end date/time`)]
dtair[, TravelDurationDays := as.numeric(1+difftime(as.Date(`Travel end date/time`), as.Date(`Travel start date/time`), units = "days"))]
dtair[, `:=`(qtr = as.Date(`Travel start date/time`), `Travel start date/time` = NULL, `Travel end date/time`=NULL)]
dtair[, qtr := paste0(year(qtr),"-Q",quarter(qtr))]
dtair[, Domestic:=ifelse(`Domestic / International`=="Domestic", 1, 0)]
dtair[, Transborder:=ifelse(`Domestic / International`=="Domestic", 0, 1)]
dtair[,`:=`(`Domestic / International`=NULL)]
dtair = dtair[,.(AirExpense = sum(`Transaction amount (C$)`), TravelDays = sum(`TravelDurationDays`), DomesticTravels = sum(`Domestic`), IntlTravels = sum(Transborder)), by=.(`Employee ID`, `qtr`)]
airID = dtair$ID
length(airID[nchar(airID)==5])
names(dtair)[1] = "ID"
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
length(intersect(dtair$ID, dtrew$ID))
length(intersect(airID, dtrew$ID))
unique(airID)
substr(airID, 1, 2)
dtrew[,ID:=as.character(ID)]
length(intersect(airID, dtrew$ID))
length(intersect(airID, dtrew$ID))
length(airID[substr(airID, 1, 2)=="70"])
id = airID[substr(airID, 1, 2)=="70"]
setdiff(airID[id], dtrew$ID)
setdiff(id, dtrew$ID)
setdiff(id, dtrew$ID)
length(unique(id))
length(unique(airID))
length(unique(intersect(airID, dtrew$ID)))
setdiff(unique(airID), unique(dtrew$ID))
length(unique(intersect(airID, dtrew$ID)))
id = substr(airID, 1, 2)=="70"
table(id)
airID[id] = paste0("70", airID[id] )
table(id, useNA="always")
airID = dtair$ID
length(airID[nchar(airID)==5])
unique(airID)
id = substr(airID, 1, 2)=="70"
airID[is.na(airID)] = "missing"
id = substr(airID, 1, 2)=="70"
table(id, useNA="always")
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 637
setdiff(unique(airID), unique(dtrew$ID))
length(setdiff(unique(airID), unique(dtrew$ID)))
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==8
unique(airID[id])
airID[id] = substr(airID[id], 2, 8 )
setdiff(unique(airID), unique(dtrew$ID))
length(setdiff(unique(airID), unique(dtrew$ID)))
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
unique(airID)
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 637
length(setdiff(unique(airID), unique(dtrew$ID)))
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==8
unique(airID[id])
airID[id] = substr(airID[id], 2, 8 )
length(setdiff(unique(airID), unique(dtrew$ID)))
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==9
unique(airID[id])
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 199 no match
setdiff(unique(airID), unique(dtrew$ID))
# Do some cleaning of the Air travel ID
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
unique(airID)
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 637
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==8
unique(airID[id])
airID[id] = substr(airID[id], 2, 8 )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 199 no match
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 153 no match
setdiff(unique(airID), unique(dtrew$ID))
grep("ca", tolower(substr(airID)), value=T)
grep("ca", tolower(substr(airID,1,2)), value=T)
grep("ca", tolower(substr(airID,1,2)))
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID, 3, nchar(airID))
# Do some cleaning of the Air travel ID
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
airID[is.na(airID)] = "missing"
unique(airID)
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 918
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
setdiff(unique(airID), unique(dtrew$ID))
unique(airID[id])
id = nchar(airID)==8
airID[id] = substr(airID[id], 2, 8 )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 199 no match
setdiff(unique(airID), unique(dtrew$ID))
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 153 no match
setdiff(unique(airID), unique(dtrew$ID))
id = grep("ca", tolower(substr(airID,1,2)))
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID[id], 3, nchar(airID))
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 153 no match
id = nchar(airID)==9
unique(airID[id])
airID[id] = substr(airID[id], 3, 9 )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 199 no match
id = nchar(airID)==10
unique(airID[id])
airID[id] = substr(airID[id], 4, 10 )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 140 no match
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
unique(airID)
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 918
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
setdiff(unique(airID), unique(dtrew$ID))
for(i in 8:14){
id = nchar(airID)==i
unique(airID[id])
airID[id] = substr(airID[id], i-6, i )
print(length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 199 no match)
setdiff(unique(airID), unique(dtrew$ID))
}
for(i in 8:14){
id = nchar(airID)==i
unique(airID[id])
airID[id] = substr(airID[id], i-6, i )
print(length(setdiff(unique(airID), unique(dtrew$ID))))
}
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 153 no match
setdiff(unique(airID), unique(dtrew$ID))
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID[id], 3, nchar(airID))
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 145 no match
table(nchar(dtair$ID))
airID = dtair$ID
unique(airID)
length(airID[nchar(airID)==5])
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 918
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
setdiff(unique(airID), unique(dtrew$ID))
for(i in 8:14){
id = nchar(airID)==i
unique(airID[id])
airID[id] = substr(airID[id], i-6, i )
print(length(setdiff(unique(airID), unique(dtrew$ID))))
}
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 153 no match
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 128 no match
setdiff(unique(airID), unique(dtrew$ID))
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID[id], 3, nchar(airID))
table(nchar(dtair$ID))
airID = dtair$ID
length(airID[nchar(airID)==5])
unique(airID)
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 918
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID[id], 3, nchar(airID))
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 145 no match
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 264 no match
setdiff(unique(airID), unique(dtrew$ID))
for(i in 8:14){
id = nchar(airID)==i
unique(airID[id])
airID[id] = substr(airID[id], i-6, i )
print(length(setdiff(unique(airID), unique(dtrew$ID)))) # 174 no match
}
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 128 no match
setdiff(unique(airID), unique(dtrew$ID))
# Do some cleaning of the Air travel ID
table(nchar(dtair$ID))
airID = dtair$ID
unique(airID)
length(airID[nchar(airID)==5])
airID[is.na(airID)] = "missing"
id = nchar(airID)==5
table(id, useNA="always")
airID[id] = paste0("70", airID[id] )
length(unique(intersect(airID, dtrew$ID))) # [1] 918
length(setdiff(unique(airID), unique(dtrew$ID))) # 270 no match
id = nchar(airID)==6
unique(airID[id])
airID[id] = paste0("7", airID[id] )
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 128 no match
setdiff(unique(airID), unique(dtrew$ID))
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 128 no match
id = grep("ca", tolower(substr(airID,1,2)))
airID[id] = substr(airID[id], 3, nchar(airID))
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 264 no match
length(setdiff(unique(airID), unique(dtrew$ID))) # [1] 217 no match
setdiff(unique(airID), unique(dtrew$ID))
for(i in 8:14){
id = nchar(airID)==i
unique(airID[id])
airID[id] = substr(airID[id], i-6, i )
print(length(setdiff(unique(airID), unique(dtrew$ID)))) # 174 no match
}
setdiff(unique(airID), unique(dtrew$ID))
print(length(setdiff(unique(airID), unique(dtrew$ID)))) # 133 no match
dtair$ID = airID
# Join the two files
setkeyv(dtrew, c("ID", "qtr"))
setkeyv(dtair, c("ID", "qtr"))
dtrew = merge(dtrew, dtair, by=c("ID", "qtr"), all.x=T)
sum(dtrew$AirExpense, na.rm = T)
sum(dtair$AirExpense, na.rm = T)
dtairbad = dtair[!`ID` %in% dtrew$ID]
sum(dtrew$AirExpense, na.rm = T)
sum(dtair$AirExpense, na.rm = T)
# 1) Can we link "Pooled Claims Report" to Rewards, we have no employee ID in the former.
# 2) Do we have dependants information for employees who left two years ago. Eg. Richard Kemp (ID:7000288)
# left looks like he left at the end of 2013, but he is not in the mcpmdep file. Can we get this one quarterly ?
#############################################################
rm(list=ls())
setwd("C:/Users/IBM_ADMIN/Box Sync/Labatt Brewing/_data")
# Load libraries
library(readxl)
library(data.table)
# file names and location
name_rewards = "Rewards Data/Rewards Data - Historical.xlsx"
name_claims  = "Rewards Data/Labatt - Pooled Claims Report - 01JAN16 to 30SEP16.xlsx"
name_unknown = "Rewards Data/C0083165_mcpmdep_141016_190127_85478E.xls"
#name_hris    = "SAP_Example.xlsx"
name_travel  = "Travel docs. Rewards Doc 2.xls"
# Check the sheets in each
excel_sheets(name_rewards)
excel_sheets(name_claims)
excel_sheets(name_unknown)
#excel_sheets(name_hris)
excel_sheets(name_travel)
# This removes anything from a previous session
rm(list=ls())
# Lets check current time
Sys.time()
# First we set our working directory
# Please change this to your working directory where the data is
setwd("C:/Users/IBM_ADMIN/Box Sync/DScTraining/_2610_meeting")
getwd()
# Libraries
library(tree)
library(MASS)
set.seed(1)
# Lets look at Hitters data
data("Boston")
str(Boston)
# Lets create our training and test data
# Median house value is the target
x=Boston
x$medv = NULL
y=Boston$medv
# Lets split our data into two folds and predict
set.seed(1)
ind = createFolds(y, 2, list=F)
X_train = x[ind==1, ]
X_test  = x[ind!=1, ]
y_train = y[ind==1 ]
y_test  = y[ind!=1 ]
# Now lets model
tree.boston =tree(y_train~., X_train)
summary (tree.boston )
plot(tree.boston )
text(tree.boston ,pretty =0)
?tree
cv.boston =cv.tree(tree.boston )
plot(cv.boston$size ,cv.boston$dev ,type="b")
# Now we prune the tree
prune.boston =prune.tree(tree.boston ,best =5)
plot(prune.boston )
text(prune.boston ,pretty =0)
# Let us predict on the tree
ypred.tree = predict (tree.boston ,newdata = X_test)
plot(y_test, ypred.tree, col="blue", pch=19)
abline (0,1)
rmse(y_test, ypred.tree)
# 5.059668
# Lets compare to a linear model type approach
lm.mod = lm(y_train~., data=data.frame(X_train))
ypred.lm = predict(lm.mod, data.frame(X_test))
points(ypred.lm, col="red", pch=19)
rmse(y_test, ypred.lm)
# 4.679406
# Lets check if we combine the two
# These two models work a lot differently, so a combination of the two can often do better than one on its own.
rmse(y_test, (ypred.lm+ypred.tree)/2)
# [1] 4.22782
library(Metrics)
