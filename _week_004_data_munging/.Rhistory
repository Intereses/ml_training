install.packages("LightGBM")
library(devtools)
install.packages("devtools")
options(devtools.install.args = "--no-multiarch")
install_github("Microsoft/LightGBM", subdir = "R-package")
install_github("Microsoft/LightGBM", subdir = "R-package")
options(devtools.install.args = "--no-multiarch")
install_github("Microsoft/LightGBM", subdir = "R-package")
# Create some variables
6+6
a = 3
b = 4
a
b
# Lets add them
a + b
# lets try a character vector
char = c("The brown cow", "said", "moo")
char[3]
# Boolean
bool = c(TRUE, TRUE, FALSE, T, F, T, F, F)
bool
# now lets create variables
v1 = c(1, 5, 9, 9, 5, 5, 5, 5)
v2 = c(a, b, 7, 5, 5, 5, 5, 5)
v1 * v2
# now lets put them in a matrix
m1 = matrix(c(v1, v2), nrow = length(v1))
m1
# rename the colums
colnames(m1) = c("First", "Second")
m1
rownames(m1) = 1:nrow(m1)
m1
# lets get a description of our matrix
summary(m1)
?summary
# lets get a compact description of our matrix
str(m1)
?str
# If we want to add a different type of variable to a matrix we need to use a data frame
df1 = data.frame(col1 = v1, col2 = v2, col4 = bool)
df1
str(df1)
# Today we look at joins in R.
# You will need to load the library library(nycflights13) and library(dplyr)
# In TI data preprocessing, we often want to,
#     Join multiple files to  gether at different levels of aggregation
#     Summarise files - create counts of categories etc.
#     Fast processing of files
# The vignette is stored at,
# https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html
# https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html
# http://stat545.com/bit001_dplyr-cheatsheet.html
## install libraries
# install.packages("dplyr")
library(plyr) # Important to load this before dplyr
library(dplyr)
library(readr)
# This removes anything from a previous session
rm(list=ls())
# Lets check current time
Sys.time()
setwd("/Users/dhanley2/Documents/ml_training_r/_004_meeting")
getwd()
# Load our data and take a quick look
flights = read_csv("data/flights.csv")
head(flights)
setwd("/Users/dhanley2/Documents/ml_training_r/_004_meeting/data")
getwd()
install.packages("nycflights13", repos='http://cran.us.r-project.org')
library("nycflights13", lib.loc = "C:/Program Files/R/R-3.1.1/library")
library("nycflights13"")
)
)
""
library("nycflights13")
head(flights)
#flights = read_csv("data/flights.csv")
head(flights)
dim(flights)
str(flights)
# # Dplyr has what it call verbs of data manipulation
# filter() (and slice())
# arrange()
# select() (and rename())
# distinct()
# mutate() (and transmute())
# summarise()
# sample_n() (and sample_frac())
# We start with 'filter' and 'arrange'
filter(flights, year == 2013, day == 1, month == 1, dest == "ATL")
filter(flights, year == 2013, day == 1, month %in% 1:4, dest == "ATL")     # lies in range
filter(flights, year == 2013, day == 1, month %in% c(1,6), dest == "ATL")  # multiple conditions
filter(flights, year == 2013, day == 1, origin == "EWR", dest == "IAH")    # AND search
filter(flights, year == 2013, day == 1, origin == "EWR" | dest == "IAH")   # OR search
# Now lets see how arrange works,
arrange(flights, year, month, day, arr_delay)
arrange(flights, year, month, day, -arr_delay)  # ascending arr_delay
# Select rows and columns based on id
slice(flights, 1:3)
slice(flights, 100:102)
slice(flights, -c(3:5))
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
# Look at unique combinations of rows and columns
distinct(flights, carrier)
distinct(flights, carrier, dest)
newDF = distinct(flights, carrier, dest)
class(newDF)
head(newDF)
# Add columns which are functions of existing columns
mutate(flights,                                           # Add new columns to existing
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
transmute(flights,                                        # Only keep new columns
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60))
# Groups by sets a default grouping in the dataset for following operations
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n(), planes = n_distinct(tailnum)))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year <- summarise(per_day, flights = sum(flights)))
# Chaining it all together.
#---> Option #1
a1 <- group_by(flights, year, month, day)   #
a1
a2 <- select(a1, arr_delay, dep_delay)
a2
a3 <- summarise(a2,
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE))
a3
a4 <- filter(a3, arr > 30 | dep > 30)
a4
#---> Option #2
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
# Try a second one - look at delays of flights going to Atlanta
atlanta = flights %>%
filter(dest=="ATL") %>%
group_by(carrier) %>%
summarise(
arrDelay = median(arr_delay, na.rm=T),
depDelay = median(dep_delay, na.rm=T),
flightTime = median(air_time, na.rm=T),
count = n(),
flights = n()
)
atlanta
# Now lets look at joins
# https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html
airlines = read_csv("data/airlines.csv")
airlines
atlanta
atlanta %>% left_join(airlines)
library(plyr) # Important to load this before dplyr
library(dplyr)
library(readr)
# This removes anything from a previous session
rm(list=ls())
# Lets check current time
Sys.time()
# First we set our working directory
# Please change this to your working directory where the data is
setwd("/Users/dhanley2/Documents/ml_training_r/_004_meeting")
getwd()
install.packages("nycflights13", repos='http://cran.us.r-project.org')
library("nycflights13")
install.packages("nycflights13", repos = "http://cran.us.r-project.org")
#install.packages("nycflights13", repos='http://cran.us.r-project.org')
library("nycflights13")
# Load our data and take a quick look
#flights = read_csv("data/flights.csv")
head(flights)
dim(flights)
str(flights)
# We start with 'filter' and 'arrange'
filter(flights, year == 2013, day == 1, month == 1, dest == "ATL")
names(flights)
filter(flights, year == 2013,  month == 1, dest == "ATL")
filter(flights, year == 2013)#,  month == 1, dest == "ATL")
class(flights)
