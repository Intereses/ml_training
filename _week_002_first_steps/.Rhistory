source('~/Documents/tdata/features/make/bmeanR_3004.R')
hist(trnbmeanip$bmean, breaks = 1000, xlim = c(0, 0.05))
hist(trnbmeanip$bmean, breaks = 1000, xlim = c(0, 0.01))
hist(tstbmeanip$bmean, breaks = 1000, xlim = c(0, 0.01))
hist(trnbmeanip$bmean, breaks = 1000, xlim = c(0, 0.01))
trnbmeanip
tstbmeanip
hist(c(tstbmeanip$bmean, trnbmeanip$bmean) , breaks = 1000, xlim = c(0, 0.01))
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/tdata/data/'
path = '/Users/dhanley2/Documents/tdata/data/'
rnkr = function(vec){
dt = data.table(vec)
dt[, idx := 1:.N]
dt = dt[order(vec)]
dt[, rank := (1:.N)/.N]
rank = dt[order(idx)]$rank
return(rank)
}
# tstdf = fread(paste0(path, 'testval.csv'))
# sub  = fread(paste0(path, '../sub/sub_lgb2404val_difftime_thresh35.csv'), skip = 1)
# subd1 = fread(paste0(path, '../sub/sub_0505_nodev1val.csv'), skip = 1)
# subd2 = fread(paste0(path, '../sub/sub_0505_onlydev1val.csv'), skip = 1)
# tstdf[, pred := sub$V1]
#
# auc(tstdf$is_attributed, sub$V1)
# # [1] 0.9832104
# idx  = tstdf$device == 1
# auc(tstdf$is_attributed[idx], tstdf$pred[idx])
# # [1] 0.9742813
# auc(tstdf$is_attributed[idx], subd2$V1)
# # [1] 0.9745414
# tstdf[, pred1 := pred]
# tstdf[!idx]$pred1 = tstdf[!idx]$pred*0.5 + subd1$V1*0.5
# tstdf[idx]$pred1  = tstdf[idx]$pred*0.4  + subd2$V1*0.6
#
# auc(tstdf$is_attributed, tstdf$pred1)
# # [1] 0.9835154
sublb = fread(paste0(path, '../sub/blend_0503_1.postproc12.csv'))[order(click_id)]
subwb = fread(paste0(path, '../sub/wordbatch_fm_ftrl.csv'))[order(click_id)]
subkl = fread(paste0(path, '../sub/sub-it200102csv'))[order(click_id)]
subdh = fread(paste0(path, '../sub/sub_lgb2404.csv'))[order(click_id)]
sublb[, is_attributed := rnkr(is_attributed)]
subnw[, is_attributed := rnkr(is_attributed)]
subwb[, is_attributed := rnkr(is_attributed)]
subkl[, is_attributed := rnkr(is_attributed)]
subdh[, is_attributed := rnkr(is_attributed)]
cor(subkl$is_attributed, subdh$is_attributed)
tstdf = fread(paste0(path, 'test.csv'))
sub  = fread(paste0(path, '../sub/sub_lgb2404_orig.csv'))
subd1 = fread(paste0(path, '../sub/sub_lgb0505_nodev1.csv'), skip = 1)
subd2 = fread(paste0(path, '../sub/sub_lgb0505_onlydev1.csv'), skip = 1)
tstdf[, pred := sub$is_attributed]
idx  = tstdf$device != 1
cor(rnkr(tstdf[idx]$pred), rnkr(subd1$V2))
#[1] 0.8882707
cor(rnkr(tstdf[!idx]$pred), rnkr(subd2$V2))
#[1] 0.9916461
tstdf[, pred1 := pred]
tstdf[idx]$pred1  = tstdf[idx]$pred*0.5 + subd1$V2*0.5
tstdf[!idx]$pred1 = tstdf[!idx]$pred*0.8 + subd2$V2*0.2
cor(tstdf$pred, tstdf$pred1)
subout = tstdf[,.(click_id, pred1)]
setnames(subout, c("click_id", "is_attributed"))
sublb = fread(paste0(path, '../sub/blend_0503_1.postproc12.csv'))[order(click_id)]
subwb = fread(paste0(path, '../sub/wordbatch_fm_ftrl.csv'))[order(click_id)]
subkl = fread(paste0(path, '../sub/sub-it200102csv'))[order(click_id)]
subdh = fread(paste0(path, '../sub/sub_lgb2404.csv'))[order(click_id)]
subnw = subout[order(click_id)]
sublb[, is_attributed := rnkr(is_attributed)]
subnw[, is_attributed := rnkr(is_attributed)]
subwb[, is_attributed := rnkr(is_attributed)]
subkl[, is_attributed := rnkr(is_attributed)]
subdh[, is_attributed := rnkr(is_attributed)]
cor(sublb$is_attributed, subnw$is_attributed)
# [1] 0.9702561
cor(sublb$is_attributed, subwb$is_attributed)
# [1] 0.8381011
cor(subkl$is_attributed, subdh$is_attributed)
# [1] 0.9579476
subout1 = copy(sublb)
cor(subkl$is_attributed, sublb$is_attributed)
subout1[, is_attributed := (0.7*rnkr(sublb$is_attributed)) +
(0.10*rnkr(subkl$is_attributed)) +
(0.18*rnkr(subnw$is_attributed)) +
(0.02*rnkr(subwb$is_attributed))]
cor(sublb$is_attributed, subout1$is_attributed)
cor(subnw$is_attributed, subout1$is_attributed)
cor(subwb$is_attributed, subout1$is_attributed)
cor(subkl$is_attributed, subout1$is_attributed)
fwrite(subout1, paste0(path, "../sub/blend_0506_1.postproc.mixdev3.csv"), row.names = F)
fwrite(subout1, paste0(path, "../sub/blend_0506_1.postproc.mixdev4.csv"), row.names = F)
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
data <- read.table("train_active.csv.zip", nrows=10, header=T, quote="\"", sep=",")
data <- read.table(paste0(path, "train_active.csv.zip"), nrows=10, header=T, quote="\"", sep=",")
data <- read.table(paste0(path, "train_active.csv.zip"), sep=",")
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
tstdf <- read.table(paste0(path, "test.csv.zip"), sep=",")
trndf <- read.table(paste0(path, 'unzip -q train.csv.zip'), sep=",")
paste0('unzip -q ', path, 'train.csv.zip')
trndf <- fread(paste0('unzip -q ', path, 'train.csv.zip'), sep=",")
trndf <- fread(paste0(path, "train.csv"), sep=",")
tstdf <- fread(paste0(path, "test.csv"), sep=",")
trndf
trndf <- read_csv(paste0(path, "train.csv"), sep=",")
library(readr)
trndf <- read_csv(paste0(path, "train.csv"), sep=",")
trndf <- read_csv(paste0(path, "train.csv"))
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
library(readr)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
trndf <- data.table(read_csv(paste0(path, "train.csv")))
tstdf <- data.table(read_csv(paste0(path, "test.csv")))
tstdf <- data.table(read_csv(paste0(path, "test.csv")))
trnadf <- data.table(read_csv(paste0(path, "train_active.csv")))
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
#subbl = fread(paste0(path, '../sub/submission.csv'))[order(item_id)] # Public kernel -- https://www.kaggle.com/moussaid/moyen-just-simple-moyen-of-my-predictions/output
#sublg = fread(paste0(path, '../sub/lgsub_2405.csv'))[order(item_id)]
#subm1 = fread(paste0(path, '../sub/mlpsub_1905.csv'))[order(item_id)]
subm2 = fread(paste0(path, '../sub/mlpsub_1705.csv'))[order(item_id)]
subrn = fread(paste0(path, '../sub/rnnsub_2205.csv'))[order(item_id)]
sublg = fread(paste0(path, '../sub/lgsub_2505.csv'))[order(item_id)]
subml = fread(paste0(path, '../sub/mlpsub_1705.csv'))[order(item_id)]
cor(subrn$deal_probability, subml$deal_probability)
cor(sublg$deal_probability, subml$deal_probability)
cor(sublg$deal_probability, subrn$deal_probability)
subbld  = copy(sublg)
subbld$deal_probability = 0.5*(sublg$deal_probability) + 0.25*(subrn$deal_probability) + 0.25*(subml$deal_probability)
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
subml = fread(paste0(path, '../sub/mlpsub_1705.csv'))[order(item_id)]
subrn = fread(paste0(path, '../sub/rnnsub_2205.csv'))[order(item_id)]
sublg = fread(paste0(path, '../sub/lgsub_2505.csv'))[order(item_id)]
cor(subrn$deal_probability, subml$deal_probability)
cor(sublg$deal_probability, subml$deal_probability)
cor(sublg$deal_probability, subrn$deal_probability)
mean(subrn$deal_probability)
mean(sublg$deal_probability)
mean(sublg$deal_probability)
fwrite(subbld, paste0(path, '../sub/blend3x_2605.csv'))
subbld  = copy(sublg)
subbld$deal_probability = 0.5*(sublg$deal_probability) + 0.25*(subrn$deal_probability) + 0.25*(subml$deal_probability)
fwrite(subbld, paste0(path, '../sub/blend3x_2605.csv'))
#install.packages("fasttime")
rm(list=ls())
gc();gc();gc()
library(data.table)
library(RcppRoll)
library(fasttime)
library(Hmisc)
library(Metrics)
path = '~/avito/data/'
path = '/Users/dhanley2/Documents/avito/data/'
subbl = fread(paste0(path, '../sub/best_public_blend.csv'))[order(item_id)]
sublg = fread(paste0(path, '../sub/lgbbsub_2606AL2.csv'))[order(item_id)]
cor(sublg$deal_probability, subbl$deal_probability)
mean(subbl$deal_probability)
mean(sublg$deal_probability)
subbld  = copy(sublg)
subbld$deal_probability = 0.05*(subbl$deal_probability) + 0.95*(sublg$deal_probability)
subbld
fwrite(subbld, paste0(path, '../sub/blend_with_best_public_2606.csv'))
cor(sublg$deal_probability, subbld$deal_probability)
cor(subbl$deal_probability, subbld$deal_probability)
cor(sublg$deal_probability, subbl$deal_probability)
mean(subbld$deal_probability)
fwrite(subbld, paste0(path, '../sub/blend_with_best_public_2606.csv'))
# Create some variables
6+6
a = 3
b = 4
a
b
# Lets add them
a + b
# lets try a character vector
char = c("The brown cow", "said", "moo")
char[3]
# Boolean
bool = c(TRUE, TRUE, FALSE, T, F, T, F, F)
bool
# now lets create variables
v1 = c(1, 5, 9, 9, 5, 5, 5, 5)
v2 = c(a, b, 7, 5, 5, 5, 5, 5)
v1 * v2
# now lets put them in a matrix
m1 = matrix(c(v1, v2), nrow = length(v1))
m1
c(v1, v2)
# rename the colums
colnames(m1) = c("First", "Second")
m1
rownames(m1) = 1:nrow(m1)
m1
# lets get a description of our matrix
summary(m1)
?summary
# lets get a compact description of our matrix
str(m1)
?str
# If we want to add a different type of variable to a matrix we need to use a data frame
df1 = data.frame(col1 = v1, col2 = v2, col4 = bool)
df1
str(df1)
# Create some variables
rm(list=ls())
# Create some variables
6 + 6
6+6
a = 3
b = 4
a
b
# Lets add them
a + b
char = c("The brown cow", "said", "moo")
char[3]
bool = c(TRUE, TRUE, FALSE, T, F, T, F, F)
bool
# now lets create variables
v1 = c(1, 5, 9, 9, 5, 5, 5, 5)
v2 = c(a, b, 7, 5, 5, 5, 5, 5)
v1 * v2
b
# now lets put them in a matrix
v1 * v2
c(v1, v2)
m1 = matrix(c(v1, v2), nrow = length(v1))
m1
# rename the colums
colnames(m1) = c("First", "Second")
m1
rownames(m1) = 1:nrow(m1)
m1
1:nrow(m1)
1:100
nrow(m1)
1:nrow(m1)
rownames(m1)
# lets get a description of our matrix
summary(m1)
?summary
?grep
summary(m1)
str(m1)
?data.frame
df1 = data.frame(col1 = v1, col2 = v2, col4 = bool)
df1
str(df1)
# Data set from - Springleaf Financial Personal loans for bill consolidation, home improvements or unexpected expenses.
# Easy to apply for online or at one of our 700+ branches.
# In this competition, Springleaf is asking you to predict which customers will respond to a direct mail offer.
# For Data Description see : https://www.kaggle.com/c/springleaf-marketing-response
# For Data Source see : https://www.kaggle.com/c/springleaf-marketing-response/data
# This removes anything from a previous session
rm(list=ls())
# Lets check current time
time.1 <- Sys.time()
time.1
format(time.1, "%m-%d-%Y-------------------------------%H:%M:%S")
format(time.1, "%d-%m-%Y")
# First we set our working directory
# Please change this to your working directory where the data is
# setwd("C:/Users/IBM_ADMIN/Box Sync/DScTraining/_1008_meeting")
setwd("/Users/dhanley2/Documents/ml_training_r/_002_meeting")
getwd()
# # Now lets install some packages
# # this is a one time effort - after this you have the package on your PC
# install.packages("caret")
# install.packages("readr")
# install.packages("data.table")
# install.packages("R.utils")
# Now we load the packages for the session
# this is needed each time you want to use the package
library(caret)
# library(readr)
library(data.table)
library(R.utils)
# Now we read in the file, its big so lets take the first 20K rows only
getwd() # Check our working directory
# train <- read_csv("train.csv", n_max=30000)
train <- fread("train.csv", nrows=30000)
class(train)
train = data.frame(train)
#?read_csv
?fread
# lets look at the file file dimensions quickly
dim(train)
nrow(train)
ncol(train)
colnames(train)
head(train, 10)
# now we look at indexing a data frame (same applies to a matrix)
# this is a comment - because of the "#"
train[1,1]  # first row, first columns
train[nrow(train), ncol(train)] # last row, last column
train[1:4, 1:4] # first four rows, first four columns
train[,grep("VAR_002", colnames(train))]
?grep
train$ID # first column
train[,1] # first column
# We take our response variable and save it to a vector
y = train$target
hist(y)
hist(y, main = "Direct Mail offer response", col="red", xlab = "Responded")
table(y, train$VAR_0001)
plot(table(train$VAR_0001, y))
# remove the id and target, so we are left with predictor variables
train = subset(train, select=-c(ID, target))
dim(train)
# get the rowcount of the full file
#library(R.utils)
row_count = countLines("train.csv")
cat("Row count : ", row_count[1], "; Predictor column count : ", ncol(train))
# The proportion of NA values.
notMissing = 1
missing = NaN
is.na(notMissing)
length(train[   is.na(train)     ]) # number of missing values
length(train$VAR_0074[   is.na(train$VAR_0074)     ]) # number of missing values
length(train[is.na(train)])   /   (ncol(train)*nrow(train)) # proportion of missing values
# Check for duplicate rows.
var = c(1,1,1,2,3,4,5)
length(var)
length(unique(var))
nrow(train) - nrow(unique(train))
# Lets look at the columns with only one unique value. (Sapply is a bit more complex, dont worry if it needs more time)
?sapply
col_ct = sapply(train, function(x) length(unique(x)))
col_ct # how many unique variables does each columns have
cat("Constant feature count:", length(col_ct[col_ct==1]))
cat("Constant feature names:", names(col_ct[col_ct==1]))
# Identify and separate the numeric and non numeric rows.
train_numr = train[, sapply(train, function(x) is.numeric(x))]
train_char = train[, sapply(train, function(x) is.character(x))]
cat("Numerical column count : ", dim(train_numr)[2],
"; Character column count : ", dim(train_char)[2])
# Lets digs into the character features.
?str
str(train_char)
str(lapply(train_char, unique), vec.len = 4) # this one is a bit more complext but useful
train_char[, (factor.var) := lapply(.SD, as.numeric), .SDcols = factor.var]
train_char = data.table(train_char)
train_char[, (factor.var) := lapply(.SD, as.numeric), .SDcols = factor.var]
train_char[, lapply(.SD, as.numeric)]
train_char
library(Matrix)
spm <- lapply(df, function(j)sparseMatrix(i = seq_along(j),
j = as.integer(j), x = 1))
n <- 6
spm <- lapply(df, function(j)sparseMatrix(i = seq_along(j),
j = as.integer(j), x = 1))
n <- 6
spm <- lapply(df, function(j) sparseMatrix(i = seq_along(j),
j = as.integer(j), x = 1))
train_char[train_char==-1] = NA
train_char[train_char==""] = NA
train_char[train_char=="[]"] = NA
sparse.model.matrix(~.-1,data=train_char)
train_char = train[, sapply(train, function(x) is.character(x))]
library(Matrix)
train_char[train_char==-1] = NA
train_char[train_char==""] = NA
train_char[train_char=="[]"] = NA
sparse.model.matrix(~.-1,data=train_char)
type(train_char)
class(train_char)
sparse.model.matrix(~.-1,data=train_char)
train_char
str(train_char)
?sparse.model.matrix
head(lapply(train_char, as.factor))
class(lapply(train_char, as.factor))
class(data.frame(lapply(train_char, as.factor)))
str(train_char)
train_char = data.frame(lapply(train_char, as.factor))
str(train_char)
sparse.model.matrix(~.-1,data=train_char)
train_char = train[, sapply(train, function(x) is.character(x))]
sparse.model.matrix(~.-1,data=train_char)
train_char_sparse = sparse.model.matrix(~.-1,data=train_char)
dim(train_char_sparse)
train_char_sparse@Dimnames$chr
train_char_sparse@Dimnames
